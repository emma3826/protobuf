
cmake_minimum_required(VERSION 3.0)
  
set (PROTO_INSTALL_COMMAND install)

if (EXISTS ${PROTO_BUILD_PATH}/${PROTO_BUILD_DIR})
    file (REMOVE_RECURSE  ${PROTO_BUILD_PATH}/${PROTO_BUILD_DIR})
endif()

file (MAKE_DIRECTORY ${PROTO_BUILD_PATH}/${PROTO_BUILD_DIR})

set(ENV{LD_LIBRARY_PATH} ${PROTO_PATH_TO_GENERATOR})

if(${TARGET_SYSTEM} MATCHES "win32")
    set (SHARED_LIB_LIB_SUFFIX ".lib")
else ()
    set (SHARED_LIB_PREFIX_LINUX "lib")
    set (SHARED_LIB_LIB_SUFFIX ".so")
endif()
	
SET_PROPERTY(GLOBAL PROPERTY PROTO_BUF_LIB ${PROTO_INSTALL_PATH}lib/${SHARED_LIB_PREFIX_LINUX}${PROTO_LIB_NAME}${SHARED_LIB_LIB_SUFFIX}${PROTO_BUF_SHARED_LIB_VERSION})
SET_PROPERTY(GLOBAL PROPERTY PROTO_BUF_INCLUDE_DIR ${PROTO_INSTALL_PATH}include)
SET_PROPERTY(GLOBAL PROPERTY PROTO_BUF_LIB_PATH ${PROTO_INSTALL_PATH}lib) 
SET_PROPERTY(GLOBAL PROPERTY PROTO_BUF_SHARED_LIB_VERSION "")

execute_process (
	COMMAND ./autogen.sh
	WORKING_DIRECTORY ${PROTO_BUILD_PATH}
	RESULT_VARIABLE conf_res_var
	OUTPUT_VARIABLE conf_out_var
)

if (NOT ${PROTO_BUILD_SKIP})
    execute_process (
        COMMAND ../configure ${PROTO_BUILD_OPTION}
        WORKING_DIRECTORY ${PROTO_BUILD_PATH}/${PROTO_BUILD_DIR}
        RESULT_VARIABLE conf_res_var
        OUTPUT_VARIABLE conf_out_var
    )
endif(NOT ${PROTO_BUILD_SKIP})


execute_process(
COMMAND make -j4 ${PROTO_INSTALL_COMMAND}
WORKING_DIRECTORY ${PROTO_BUILD_PATH}/${PROTO_BUILD_DIR}
RESULT_VARIABLE make_res_var
OUTPUT_VARIABLE make_out_var
)

